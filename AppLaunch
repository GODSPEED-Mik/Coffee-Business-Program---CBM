[App.java](https://github.com/user-attachments/files/22095616/App.java)
package Micow.ProjectC.Micow_Cashier;
import javax.swing.*;
import javax.swing.border.EmptyBorder;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class App extends JFrame {
    // Pickup Coffee-inspired color palette
    private static final Color PICKUP_DARK = new Color(38, 50, 56); // Deep charcoal for modern sophistication
    private static final Color PICKUP_CREAM = new Color(245, 235, 220); // Warm cream for a cozy feel
    private static final Color PICKUP_ACCENT = new Color(255, 87, 34); // Vibrant orange for energy
    private static final Color PICKUP_HOVER = new Color(230, 74, 25); // Slightly darker orange for hover
    private static final Color PICKUP_GREEN = new Color(104, 159, 56); // Earthy green for natural elements
    private static final Color PICKUP_BROWN = new Color(93, 64, 55); // Coffee bean brown
    private static final Font TITLE_FONT = new Font("Poppins", Font.BOLD, 28); // Modern, clean font
    private static final Font SUBTITLE_FONT = new Font("Poppins", Font.PLAIN, 16);
    private static final Font BUTTON_FONT = new Font("Poppins", Font.BOLD, 14);

    // Constants for layout
    private static final int WINDOW_WIDTH = 450;
    private static final int WINDOW_HEIGHT = 650;
    private static final int LOGO_SIZE = 80; // Smaller logo for sleek design
    private static final int BUTTON_HEIGHT = 50;
    private static final int CORNER_RADIUS = 20;

    // Components
    private JPanel mainPanel;
    private JPanel headerPanel;
    private JPanel buttonPanel;
    private JPanel statusPanel;
    private InventoryManager inventoryManager;

    public App() {
        inventoryManager = new InventoryManager();
        initializeFrame();
        setupComponents();
        applyPickupStyling();
    }

    private void initializeFrame() {
        setTitle("â˜• Pickup Coffee Management");
        setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);

        // Set modern look and feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.err.println("Error setting look and feel: " + e.getMessage());
            e.printStackTrace();
        }

        // Create main panel with gradient background
        mainPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                GradientPaint gradient = new GradientPaint(
                    0, 0, PICKUP_CREAM,
                    0, getHeight(), Color.WHITE
                );
                g2d.setPaint(gradient);
                g2d.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        mainPanel.setLayout(new BorderLayout(0, 20));
        setContentPane(mainPanel);
    }

    private void setupComponents() {
        createHeaderPanel();
        createButtonPanel();
        createStatusPanel();

        mainPanel.add(headerPanel, BorderLayout.NORTH);
        mainPanel.add(buttonPanel, BorderLayout.CENTER);
        mainPanel.add(statusPanel, BorderLayout.SOUTH);
    }

    private void createHeaderPanel() {
        headerPanel = new JPanel();
        headerPanel.setOpaque(false);
        headerPanel.setLayout(new BoxLayout(headerPanel, BoxLayout.Y_AXIS));
        headerPanel.setBorder(BorderFactory.createEmptyBorder(30, 20, 20, 20));

        // Logo section
        JPanel logoPanel = createLogoPanel();

        // Title section
        JLabel titleLabel = new JLabel("Pickup Coffee System", SwingConstants.CENTER);
        titleLabel.setFont(TITLE_FONT);
        titleLabel.setForeground(PICKUP_DARK);
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        // Subtitle
        JLabel subtitleLabel = new JLabel("Brewing efficiency, one cup at a time", SwingConstants.CENTER);
        subtitleLabel.setFont(SUBTITLE_FONT);
        subtitleLabel.setForeground(PICKUP_BROWN);
        subtitleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        headerPanel.add(logoPanel);
        headerPanel.add(Box.createVerticalStrut(15));
        headerPanel.add(titleLabel);
        headerPanel.add(Box.createVerticalStrut(5));
        headerPanel.add(subtitleLabel);
    }

    private JPanel createLogoPanel() {
        JPanel logoPanel = new JPanel();
        logoPanel.setOpaque(false);
        logoPanel.setLayout(new FlowLayout(FlowLayout.CENTER));

        JLabel logoLabel = new JLabel();
        ImageIcon logoIcon = UIUtils.loadImageIcon(UIUtils.LOGO_PATH, LOGO_SIZE, LOGO_SIZE);

        if (logoIcon != null) {
            logoLabel.setIcon(logoIcon);
        } else {
            logoLabel.setText("â˜• Pickup");
            logoLabel.setFont(new Font("Poppins", Font.BOLD, 32));
            logoLabel.setForeground(PICKUP_DARK);
        }

        logoPanel.add(logoLabel);
        return logoPanel;
    }

    private void createButtonPanel() {
        buttonPanel = new JPanel();
        buttonPanel.setOpaque(false);
        buttonPanel.setLayout(new GridBagLayout());
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(20, 40, 20, 40));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 0, 10, 0);
        gbc.weightx = 1.0;

        ModernButton inventoryBtn = createModernButton("ðŸ“¦ Inventory Control", PICKUP_GREEN);
        ModernButton cashierBtn = createModernButton("ðŸ’¸ Brew & Bill", PICKUP_ACCENT);
        ModernButton productBtn = createModernButton("â˜• Signature Drinks", PICKUP_BROWN);
        ModernButton profitBtn = createModernButton("ðŸ“ˆ Cafe Analytics", PICKUP_DARK);

        gbc.gridy = 0;
        buttonPanel.add(inventoryBtn, gbc);
        gbc.gridy = 1;
        buttonPanel.add(cashierBtn, gbc);
        gbc.gridy = 2;
        buttonPanel.add(productBtn, gbc);
        gbc.gridy = 3;
        buttonPanel.add(profitBtn, gbc);

        inventoryBtn.addActionListener(e -> openInventory());
        cashierBtn.addActionListener(e -> openCashier());
        productBtn.addActionListener(e -> openOurProduct());
        profitBtn.addActionListener(e -> openTargetProfit());
    }

    private JLabel statusLabel;

    private void createStatusPanel() {
        statusPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        statusPanel.setOpaque(false);
        statusPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 20, 20));

        statusLabel = new JLabel();
        statusLabel.setFont(SUBTITLE_FONT);
        statusLabel.setForeground(PICKUP_BROWN);
        updateStatusTime();

        statusPanel.add(statusLabel);

        new javax.swing.Timer(60000, e -> updateStatusTime()).start();
    }

    private void updateStatusTime() {
        statusLabel.setText("Cafe Ready â€¢ " + getCurrentTime());
    }

    private ModernButton createModernButton(String title, Color accentColor) {
        ModernButton button = new ModernButton(title, accentColor);
        button.setPreferredSize(new Dimension(350, BUTTON_HEIGHT));
        return button;
    }

    private class ModernButton extends JButton {
        private Color accentColor;
        private boolean isHovered = false;

        public ModernButton(String title, Color accentColor) {
            super(title);
            this.accentColor = accentColor;
            setFocusPainted(false);
            setBorderPainted(false);
            setContentAreaFilled(false);
            setCursor(new Cursor(Cursor.HAND_CURSOR));
            setFont(BUTTON_FONT);
            setForeground(Color.WHITE);

            addMouseListener(new MouseAdapter() {
                @Override
                public void mouseEntered(MouseEvent e) {
                    isHovered = true;
                    repaint();
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    isHovered = false;
                    repaint();
                }
            });
        }

        @Override
        protected void paintComponent(Graphics g) {
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            Color bgColor = isHovered ? PICKUP_HOVER : accentColor;
            g2d.setColor(bgColor);
            g2d.fillRoundRect(0, 0, getWidth(), getHeight(), CORNER_RADIUS, CORNER_RADIUS);

            g2d.setColor(isHovered ? new Color(0, 0, 0, 100) : new Color(0, 0, 0, 50));
            g2d.setStroke(new BasicStroke(1));
            g2d.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, CORNER_RADIUS, CORNER_RADIUS);

            super.paintComponent(g);
        }
    }

    private void applyPickupStyling() {
        try {
            ImageIcon icon = UIUtils.loadImageIcon(UIUtils.LOGO_PATH, 32, 32);
            if (icon != null) {
                setIconImage(icon.getImage());
            }
        } catch (Exception e) {
            System.err.println("Error loading window icon: " + e.getMessage());
        }
    }

    private String getCurrentTime() {
        return new SimpleDateFormat("MMM dd, yyyy â€¢ HH:mm").format(new Date());
    }

    private void openInventory() {
        try {
            SwingUtilities.invokeLater(() -> {
                Inventory inventoryFrame = new Inventory(inventoryManager);
                inventoryFrame.setVisible(true);
                dispose();
            });
        } catch (Exception e) {
            showErrorDialog("Failed to open Inventory module", e);
        }
    }

    private void openCashier() {
        try {
            showInfoDialog("Brew & Bill System", "");
            POS pos = new POS();
			pos.setVisible(true);
        } catch (Exception e) {
            showErrorDialog("Failed to open Cashier module", e);
        }
    }

    private void openOurProduct() {
        try {
            SwingUtilities.invokeLater(() -> {
                Inventory inventoryFrame = new Inventory(inventoryManager);
                IngredientUsageFrame ingredientFrame = new IngredientUsageFrame(inventoryFrame, inventoryManager);
                List<IngredientUsageFrame.SavedProduct> savedRecipes = ingredientFrame.getSavedProducts();
                OurProduct productFrame = new OurProduct(inventoryManager, savedRecipes);
                IngredientUsageFrame.registerOurProductWindow(productFrame);
                productFrame.setVisible(true);
                dispose();
            });
        } catch (Exception e) {
            showErrorDialog("Failed to open Signature Drinks module", e);
        }
    }

    private void openTargetProfit() {
        try {
            showInfoDialog("Cafe Analytics", "Analytics module will be available soon!");
        } catch (Exception e) {
            showErrorDialog("Failed to open Cafe Analytics module", e);
        }
    }

    private void showErrorDialog(String message, Exception e) {
        System.err.println(message + ": " + e.getMessage());
        e.printStackTrace();
        JOptionPane.showMessageDialog(this,
            message + "\n" + e.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }

    private void showInfoDialog(String title, String message) {
        JOptionPane.showMessageDialog(this,
            message,
            title,
            JOptionPane.INFORMATION_MESSAGE);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                System.setProperty("awt.useSystemAAFontSettings", "on");
                System.setProperty("swing.aatext", "true");
                App launcher = new App();
                launcher.setVisible(true);
            } catch (Exception e) {
                System.err.println("Failed to start application: " + e.getMessage());
                e.printStackTrace();
                JOptionPane.showMessageDialog(null,
                    "Failed to start application: " + e.getMessage(),
                    "Startup Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        });
    }
}
